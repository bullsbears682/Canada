  async getComprehensiveUtilityRates(location: CanadianLocation): Promise<any> {
    this.ensureInitialized();
    
    const cacheKey = `utility-rates-${location.city}-${location.province}`;
    const cached = await this.cacheManager.get(cacheKey);
    if (cached) return cached;

    try {
      const result = await this.dataSourceManager.fetchData("utility-service", "rates", { location });
      
      const data = {
        location,
        rates: result,
        lastUpdated: new Date(),
        source: "DataServiceOrchestrator"
      };
      
      this.cacheManager.set(cacheKey, data, { ttl: 3600000 });
      return data;
    } catch (error) {
      console.error("Error fetching comprehensive utility rates:", error);
      throw error;
    }
  }

  async getMunicipalData(location: CanadianLocation): Promise<any> {
    this.ensureInitialized();
    
    const cacheKey = `municipal-${location.city}-${location.province}`;
    const cached = await this.cacheManager.get(cacheKey);
    if (cached) return cached;

    try {
      const result = await this.dataSourceManager.fetchData("municipal-service", "data", { location });
      
      const data = {
        location,
        municipalData: result,
        lastUpdated: new Date(),
        source: "DataServiceOrchestrator"
      };
      
      this.cacheManager.set(cacheKey, data, { ttl: 3600000 });
      return data;
    } catch (error) {
      console.error("Error fetching municipal data:", error);
      throw error;
    }
  }

  async getEmploymentData(location: CanadianLocation): Promise<any> {
    this.ensureInitialized();
    
    const cacheKey = `employment-${location.city}-${location.province}`;
    const cached = await this.cacheManager.get(cacheKey);
    if (cached) return cached;

    try {
      const result = await this.dataSourceManager.fetchData("employment-service", "data", { location });
      
      const data = {
        location,
        employmentData: result,
        lastUpdated: new Date(),
        source: "DataServiceOrchestrator"
      };
      
      this.cacheManager.set(cacheKey, data, { ttl: 3600000 });
      return data;
    } catch (error) {
      console.error("Error fetching employment data:", error);
      throw error;
    }
  }

  async getTaxAndBenefitsAnalysis(location: CanadianLocation, householdSize: number): Promise<any> {
    this.ensureInitialized();
    
    const cacheKey = `tax-benefits-${location.city}-${location.province}-${householdSize}`;
    const cached = await this.cacheManager.get(cacheKey);
    if (cached) return cached;

    try {
      const result = await this.dataSourceManager.fetchData("tax-service", "analysis", { location, householdSize });
      
      const recommendations = this.generateTaxAndBenefitsRecommendations(householdSize);
      
      const data = {
        location,
        householdSize,
        recommendations,
        lastUpdated: new Date(),
        source: "DataServiceOrchestrator"
      };
      
      this.cacheManager.set(cacheKey, data, { ttl: 3600000 });
      return data;
    } catch (error) {
      console.error("Error fetching tax and benefits analysis:", error);
      throw error;
    }
  }

  private generateTaxAndBenefitsRecommendations(householdSize: number): any[] {
    return [
      { type: "TAX_CREDIT", description: "Basic personal amount", amount: 15000 },
      { type: "BENEFIT", description: "Canada Child Benefit", amount: householdSize * 6000 },
      { type: "TAX_CREDIT", description: "GST/HST credit", amount: 500 }
    ];
  }

  getConfigurationStatus(): any {
    return {
      dataSources: this.dataSourceManager.getStatus(),
      cache: this.cacheManager.getStats(),
      lastUpdated: new Date(),
      version: "1.0.0"
    };
  }

  getPerformanceMetrics(): any {
    return {
      cacheHitRate: this.cacheManager.getStats().hitRate,
      averageResponseTime: 150,
      totalRequests: 1000,
      lastUpdated: new Date()
    };
  }

  getCacheInfo(): any {
    return {
      stats: this.cacheManager.getStats(),
      size: this.cacheManager.getStats().size,
      lastUpdated: new Date()
    };
  }

  async getCachedData<T>(key: string): Promise<T | null> {
    return this.cacheManager.get(key);
  }

  async setCachedData<T>(key: string, data: T, ttl?: number): Promise<void> {
    this.cacheManager.set(key, data, { ttl: ttl || 3600000 });
  }

  async clearCache(): Promise<void> {
    this.cacheManager.clear();
  }